openapi: 3.0.0
info:
  description: Backend server documentation
  version: 1.0.0
  title: Backend
tags:
  - name: user
    description: User management
  - name: status
    description: API status
  - name: ticket
    description: Ticket managment
paths:
  /status:
    get:
      tags:
        - status
      summary: Get API status
      description: ""
      operationId: getStatus
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiStatus"
  /login:
    post:
      tags:
        - user
      summary: Login as user
      description: ""
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BearerToken"
        "400":
          description: Bad request
  /user:
    post:
      tags:
        - user
      summary: Create new user
      description: ""
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Get current user
      description: ""
      operationId: getCurrentUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
  "/user/{email}":
    patch:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Patch user
      description: "At least one field is required. Only admin can specify roles and disabled fields.
Non-admin user can only patch themselves. Admin can patch anyone."
      operationId: patchUser
      parameters:
        - name: email
          in: path
          description: User email
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
  /users:
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      summary: Get all users
      description: ""
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "400":
          description: Bad request
  /ticket:
    get:
      security:
        - bearerAuth: []
      tags:
        - ticket
      summary: Get current user tickets
      description: Only admin can use all=true. If true return every ticket regardless of current user.
      parameters:
        - name: all
          in: query
          required: false
          description: "Return all tickets if all is true and current user role is admin"
          schema:
            type: boolean
      operationId: getTickets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tickets"
        "400":
          description: Bad request
    post:
      security:
        - bearerAuth: []
      tags:
        - ticket
      summary: Create new ticket
      description: "Create new ticket which author is logged user"
      operationId: createTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTicket'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewTicket'
        "400":
          description: Bad request
  /ticket/{ticketId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - ticket
      summary: Get ticket
      description: "User can only get their own tickets"
      operationId: getTicket
      parameters:
        - name: ticketId
          in: path
          description: ticket id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketWithComments'
        "400":
          description: "Bad request"
    patch:
      security:
        - bearerAuth: []
      tags:
        - ticket
      summary: Patch ticket
      description: "At least one field is required. Non-admin user can only patch themselves.
       Admin can patch anyone."
      operationId: patchTicket
      parameters:
        - name: ticketId
          in: path
          description: ticket id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchTicket'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchTicket'
        "400":
          description: Bad request
  /ticket/{ticketId}/comment:
    post:
      security:
        - bearerAuth: []
      tags:
        - ticket
      summary: Create new comment
      description: "Users can only add comments to their own tickets"
      parameters:
        - name: ticketId
          in: path
          description: ticket id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewComment'
        "400":
          description: Bad request
  /trips:
    get:
      security:
        - bearerAuth: []
      tags:
        - trips
      summary: Get current user all trips
      description: Shows all trips created by user.
      operationId: getTrips
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trips"
        "400":
          description: Bad request
  /trip/{tripId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - trip
      summary: Get current user trip
      description: Shows only one trip with provided tripId created by user.
      operationId: getTrip
      parameters:
          - name: ticketId
            in: path
            description: ticket id
            required: true
            schema:
              type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/trip'
        "400":
          description: Bad request
    patch:
      tags:
        - trip
        summary: patches trip
        description: "patches trip that was created by user provided by user(guide)"
        operationId: update
        - responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PatchTrip"
          "400":
            description: Bad request
  /trip:
    post:
      tags:
        - trip
        summary: create new trip
        description: "create new trip with informations provided by user(guide)"
        operationId: createTrip
        - responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/NewTrip"
            "400":
              description: Bad request

servers:
  - url: http://149.156.146.249:60001/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BearerToken:
      type: object
      properties:
        token:
          type: string
    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    NewUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        disabled:
          type: boolean
        roles:
          type: array
          items:
            type: string
    Tickets:
      type: array
      items:
        $ref: "#/components/schemas/Ticket"
    Ticket:
      type: object
      properties:
        id:
          type: integer
        closed:
          type: boolean
        author:
          type: string
        create_data:
          type: string
    NewTicket:
      type: object
      properties:
        content:
          type: string
      required:
        - content
    PatchTicket:
      type: object
      properties:
        content:
          type: string
        closed:
          type: boolean
      required:
        - content
        - closed
    Comments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        content:
          type: string
        author:
          type: string
    NewComment:
      type: object
      properties:
        content:
          type: string
      required:
        - content
    TicketWithComments:
      type: object
      properties:
        ticket:
          $ref: '#/components/schemas/Ticket'
        comments:
          $ref: '#/components/schemas/Comments'
    ApiStatus:
      type: object
      properties:
        status:
          type: string



